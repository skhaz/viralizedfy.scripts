#!/usr/bin/env python3
import re
import functools
import itertools
from pathlib import Path

import click
from jinja2 import Environment, BaseLoader, Template

try:
  import ujson as json
except ImportError:
  import json


residuous = (Path.cwd() / 'residuous.txt').read_text().splitlines()

jinja2_env = Environment(loader=BaseLoader(), trim_blocks=True)

base = Template('''---
path: "{{ guid }}"
title: "{{ title }}"
date: "2019-05-04"
tags: ["whatsapp"]
draft: false
---

{{ content }}

''')

tags = '''
![{{ title }}]({{ media }})
---
`audio: title: {{ media }}`
---
`video: title: {{ title|tojson }}: {{ media }}`
'''.split(
  '---'
)

templates = {
  key: f'{{% include base %}}\n{value}'
    for key, value in dict(
      image=tags[0],
      audio=tags[1],
      video=tags[2],
    ).items()
}


def render(context):

  def _clean(field):
    value = context[field]
    del context[field]
    [r for r in residuous if (value := value.replace(r, ''))]
    return value

  title = _clean('title')
  content = _clean('title')
  kind, _ = context['mimetype'].split('/')
  template = templates[kind]
  result = jinja2_env.from_string(template).render(base=base, content=content, **context)

  filepath = Path.cwd() / f'{context["guid"]}.md'
  filepath.write_text(result)


@click.command()
@click.option('-d', '--directory', required=True)
def run(directory):
  path = Path(directory).resolve()
  if not path.exists():
    return

  files = {p for p in path.glob('*.json')} or [path]
  dataset = itertools.chain(*map(lambda f: json.loads(f.read_text()), files,))
  [*map(render, dataset)]


if __name__ == '__main__':
  run()
